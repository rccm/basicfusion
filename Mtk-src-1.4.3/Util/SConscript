Import('env')

env.BuildDir('obj', 'src', duplicate=0)
file_list = Split("""obj/MtkVersion.c
                     obj/MtkDataBufferAllocate.c
                     obj/MtkDataBufferFree.c
                     obj/MtkDataBufferAllocate3D.c
                     obj/MtkDataBufferFree3D.c
                     obj/MtkDataBufferImport.c
                     obj/MtkStringListFree.c
                     obj/MtkParseFieldname.c
                     obj/MtkHdfToMtkDataTypeConvert.c
                     obj/MtkCalToJulian.c
                     obj/MtkJulianToCal.c
                     obj/MtkDateTimeToJulian.c
                     obj/MtkJulianToDateTime.c
                     obj/MtkTaiToTaiJd.c
                     obj/MtkTaiJdToTai.c
                     obj/MtkTaiJdToUtcJd.c
                     obj/MtkUtcJdToUtc.c
                     obj/MtkUtcToUtcJd.c
                     obj/MtkUtcJdToTaiJd.c
                     obj/MtkTaiToUtc.c
                     obj/MtkUtcToTai.c""")

obj = env.SharedObject(file_list)
Return('obj')

env.StaticLibrary('lib/Util', file_list)
#env.SharedLibrary('lib/Util', file_list)

#---------------------------------------------------------------------
# Unit Tests
#---------------------------------------------------------------------

unit_tests = Split("""MtkVersion_test
                      MtkDataBufferAllocate_test
                      MtkDataBufferFree_test
                      MtkDataBufferAllocate3D_test
                      MtkDataBufferFree3D_test
                      MtkDataBufferImport_test
                      MtkStringListFree_test
                      MtkParseFieldname_test
                      MtkHdfToMtkDataTypeConvert_test
                      MtkCalToJulian_test
                      MtkJulianToCal_test
                      MtkDateTimeToJulian_test
                      MtkJulianToDateTime_test
                      MtkTaiToUtc_test
                      MtkUtcToTai_test
                      MtkTaiJdToTai_test
                      MtkUtcJdToTaiJd_test
                      MtkUtcToUtcJd_test
                      MtkUtcJdToUtc_test
                      MtkTaiToTaiJd_test
                      MtkTaiJdToUtcJd_test""")

lib_depend =  Split("""Util
                       """) + env['LIBS']

lib_depend_path = Split("""lib
                           """) + env['LIBPATH']

if env['RUN_UNIT_TESTS']:
   for file in unit_tests:
      test = env.Object('obj/' + file + '.c')
      test_exec = env.Program('bin/' + file, test, LIBS= lib_depend,
                 LIBPATH= lib_depend_path)
      test_alias = env.Alias('test',[test_exec],test_exec[0].abspath)
      AlwaysBuild(test_alias)
