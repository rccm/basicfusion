Import('env')

env.BuildDir('obj', 'src', duplicate=0)

file_list = Split("""obj/MtkReadData.c
                     obj/MtkReadBlock.c
                     obj/MtkReadBlockRange.c
                     obj/MtkReadConv.c
                     obj/MtkReadL1B2.c
                     obj/MtkReadL2Land.c
                     obj/MtkReadRaw.c
                     obj/MtkCache.c""")

obj = env.SharedObject(file_list)
Return('obj')

env.StaticLibrary('lib/ReadData', file_list)
#env.SharedLibrary('lib/ReadData', file_list)

#---------------------------------------------------------------------
# Unit Tests
#---------------------------------------------------------------------

unit_tests = Split("""MtkReadData_test
                      MtkReadBlock_test
                      MtkReadBlockRange_test
                      MtkReadConv_test
                      MtkReadL1B2_test
                      MtkReadL2Land_test
                      MtkReadRaw_test
                      MtkCache_test""")

lib_depend = Split("""ReadData
                      SetRegion
                      OrbitPath
                      MapQuery
                      CoordQuery
                      UnitConv
                      misrcoord
                      FileQuery
                      Util""") + env['LIBS']

lib_depend_path = Split("""lib
                           #FileQuery/lib
                           #MapQuery/lib
                           #SetRegion/lib
                           #CoordQuery/lib
                           #UnitConv/lib
                           #Util/lib
                           #OrbitPath/lib
                           #misrcoord""") + env['LIBPATH']

if env['RUN_UNIT_TESTS']:
   for file in unit_tests:
      test = env.Object('obj/' + file + '.c')
      test_exec = env.Program('bin/' + file, test, LIBS= lib_depend,
                 LIBPATH= lib_depend_path)
      test_alias = env.Alias('test',[test_exec],test_exec[0].abspath)
      AlwaysBuild(test_alias)
